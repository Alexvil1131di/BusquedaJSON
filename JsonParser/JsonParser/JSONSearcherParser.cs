//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\olial\OneDrive\Escritorio\json\JsonParser\JsonParser\JSONSearcher by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class JSONSearcherParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FIRST=1, LAST=2, ID=3, DOT=4, LBRACK=5, RBRACK=6, INT=7, WS=8;
	public const int
		RULE_parse = 0, RULE_expr = 1;
	public static readonly string[] ruleNames = {
		"parse", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'first'", "'last'", null, "'.'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FIRST", "LAST", "ID", "DOT", "LBRACK", "RBRACK", "INT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JSONSearcher"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JSONSearcherParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JSONSearcherParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JSONSearcherParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JSONSearcherParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONSearcherVisitor<TResult> typedVisitor = visitor as IJSONSearcherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4;
			expr(0);
			State = 5;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParentContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(JSONSearcherParser.ID, 0); }
		public ParentContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONSearcherVisitor<TResult> typedVisitor = visitor as IJSONSearcherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChildAttributeContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(JSONSearcherParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(JSONSearcherParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(JSONSearcherParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(JSONSearcherParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(JSONSearcherParser.LAST, 0); }
		public ChildAttributeContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONSearcherVisitor<TResult> typedVisitor = visitor as IJSONSearcherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChildAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChildContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JSONSearcherParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(JSONSearcherParser.ID, 0); }
		public ChildContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONSearcherVisitor<TResult> typedVisitor = visitor as IJSONSearcherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChild(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ParentContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 8;
			Match(ID);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 19;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 17;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						_localctx = new ChildContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 10;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 11;
						Match(DOT);
						State = 12;
						Match(ID);
						}
						break;
					case 2:
						{
						_localctx = new ChildAttributeContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 13;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 14;
						Match(LBRACK);
						State = 15;
						((ChildAttributeContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FIRST) | (1L << LAST) | (1L << INT))) != 0)) ) {
							((ChildAttributeContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 16;
						Match(RBRACK);
						}
						break;
					}
					} 
				}
				State = 21;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '\x19', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x14', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x17', '\v', '\x3', '\x3', '\x3', 
		'\x2', '\x3', '\x4', '\x4', '\x2', '\x4', '\x2', '\x3', '\x4', '\x2', 
		'\x3', '\x4', '\t', '\t', '\x2', '\x18', '\x2', '\x6', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\t', '\x3', '\x2', '\x2', '\x2', '\x6', '\a', '\x5', '\x4', 
		'\x3', '\x2', '\a', '\b', '\a', '\x2', '\x2', '\x3', '\b', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\t', '\n', '\b', '\x3', '\x1', '\x2', '\n', '\v', 
		'\a', '\x5', '\x2', '\x2', '\v', '\x15', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\r', '\f', '\x4', '\x2', '\x2', '\r', '\xE', '\a', '\x6', '\x2', '\x2', 
		'\xE', '\x14', '\a', '\x5', '\x2', '\x2', '\xF', '\x10', '\f', '\x3', 
		'\x2', '\x2', '\x10', '\x11', '\a', '\a', '\x2', '\x2', '\x11', '\x12', 
		'\t', '\x2', '\x2', '\x2', '\x12', '\x14', '\a', '\b', '\x2', '\x2', '\x13', 
		'\f', '\x3', '\x2', '\x2', '\x2', '\x13', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x17', '\x3', '\x2', '\x2', '\x2', '\x15', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x13', '\x15',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
